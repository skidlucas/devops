description de la chaine de build : version plus formelle du schéma de simur / lucas


faire un plugin maven ou un script qui fait par exemple "mvn mutation" et lance tout le programme de tests
===> SCRIPT

-- il faut modifier le generate-sources de mvn pour changer la chaine de build (et insérer les mutations de spoon) quand on fait "mvn test" par exemple --
il faut que quand on appelle mvn test on utilise le processeur de spoon et pas celui de base
					--- vérifier les properties de mvn ---

script : src => !! ici les mutations ==> compilation => lancer les tests (que utiles?)
									 ==> compilation => lancer les tests (que utiles?)
									 ==> compilation => lancer les tests (que utiles?) 
									 ...
====> faire des .xml avec les stats (nb mutations, nb mutants tués, ...) ====> en faire un .html 

MVP:
savoir faire UNE chaine de A à Z 
 + ajouter des mutations pertinentes ?
 + optimiser le temps (éviter de lancer TOUS les tests à chaque mutation)


---------------------------NOTES SIMUR---------------------------
normalement, tant qu'on évite de toucher aux private, public, etc..., on doit éviter les erreurs de compil.
éviter les erreurs d'exécution car le banc de test ne sera meme pas exécuté
ne pas lancer des mutations sur tout le code (c'est sur que ça va planter)

faire une modif à un endroit, puis on incrémente....=> on fait grossir notre mutant, tant qu'il survit on continue
faire des mutations élémentaires dans un premier temps et les combiner après ??
faire une boucle : t'attrapes une partie du code, tu fais tes mutations, et suivant les résultats tu recommences avec des arguments différents ??
réfléchir à une stratégie pour appliquer les mutations en boucle et à sa condition d'arret 
est ce qu'on chope les feuilles de l'arbre syntaxique et on remonte petit à petit ?

REFLEXIONS POST DISCUSSION:
BUT : que le mutant soit tué par les tests
donc pourquoi le faire grossir ? s'il survit c'est qu'il y a un problème ??

LIENS
https://github.com/SpoonLabs (spoon-maven-plugin)

Questions
timeout boucle infinie